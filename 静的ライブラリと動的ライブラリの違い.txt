静的ライブラリと動的ライブラリの違い

静的ライブラリ（Static Library）
定義: 静的ライブラリは、コンパイル時にプログラムに組み込まれるライブラリです。通常、.lib（Windows）や .a（UNIX/Linux）という拡張子が付いています。

特徴:

コンパイル時リンク: ソースコードがコンパイルされる際に、ライブラリのコードがプログラムの実行ファイルに組み込まれます。これにより、実行ファイルが自立して動作するため、外部のライブラリファイルが必要ありません。
ファイルサイズ: 組み込まれるライブラリのコードが実行ファイルに含まれるため、実行ファイルのサイズが大きくなる傾向があります。
ロード時間: 実行時に追加のライブラリの読み込みが不要なので、プログラムの起動が速いです。
アップデート: ライブラリのコードを更新する場合、プログラムを再コンパイルする必要があります。
利点:

実行ファイルが自立しているため、配布が簡単。
実行時のパフォーマンスが向上する可能性がある。
欠点:

実行ファイルが大きくなりがち。
ライブラリの変更やバグ修正に対処するためにプログラム全体を再コンパイルする必要がある。
動的ライブラリ（Dynamic Library）
定義: 動的ライブラリは、実行時にプログラムによってロードされるライブラリです。通常、.dll（Windows）や .so（UNIX/Linux）、.dylib（macOS）という拡張子が付いています。

特徴:

実行時リンク: プログラムの実行中にライブラリがメモリに読み込まれ、リンクされます。プログラムはライブラリの存在を知っており、動的に呼び出すことができます。
ファイルサイズ: ライブラリのコードが実行ファイルに組み込まれないため、実行ファイルのサイズが小さくなります。
ロード時間: 実行時にライブラリをロードするため、起動時間が若干遅くなる可能性があります。
アップデート: ライブラリのコードを変更してもプログラムを再コンパイルする必要がなく、ライブラリファイルだけを更新すれば済みます。
利点:

実行ファイルが小さくなる。
ライブラリのアップデートが容易で、プログラムの再コンパイルが不要。
複数のプログラムで同じライブラリを共有できるため、メモリ使用量が効率的。
欠点:

実行時にライブラリが存在しない場合、プログラムが起動しないことがある。
起動時にライブラリのロードが行われるため、起動時間が長くなることがある。
まとめ
静的ライブラリは、コンパイル時にプログラムに組み込まれ、実行ファイルが自立するため、配布が簡単ですが、ファイルサイズが大きくなることがあります。
動的ライブラリは、実行時にプログラムによってロードされ、ファイルサイズが小さくなる一方、ライブラリの存在を確保する必要があり、起動時に若干の遅延が発生する可能性があります。